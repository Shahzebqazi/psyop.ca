#!/bin/bash

# PSYOP Website Development Commands
# Provides Stack-like experience: ./stack-dev dev, ./stack-dev status, etc.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help
show_help() {
    echo "PSYOP Website Development Commands"
    echo ""
    echo "Usage: ./stack-dev [COMMAND]"
    echo ""
    echo "Development Commands:"
    echo "  dev         Development mode with auto-reload (recommended)"
    echo "  build       Build the project only"
    echo "  run         Run the server only (no auto-reload)"
    echo ""
    echo "Setup Commands:"
    echo "  setup       Check and regenerate missing project files"
    echo "  rebuild     Force rebuild all project files"
    echo "  status      Show project status"
    echo "  help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./stack-dev dev      # Start development server"
    echo "  ./stack-dev setup    # Setup project files"
    echo "  ./stack-dev build    # Build project"
    echo "  ./stack-dev status   # Check status"
    echo ""
    echo "This provides the same functionality as:"
    echo "  runhaskell config/dev-server.hs [COMMAND]"
}

# Function to check if dev-server.hs exists
check_dev_server() {
    if [ ! -f "config/dev-server.hs" ]; then
        print_error "config/dev-server.hs not found!"
        print_error "Please ensure you're running this script from the project root"
        exit 1
    fi
}

# Function to run the dev-server command
run_dev_server() {
    local command="$1"
    print_info "Running: runhaskell config/dev-server.hs $command"
    
    if command -v runhaskell >/dev/null 2>&1; then
        runhaskell config/dev-server.hs "$command"
    elif command -v stack >/dev/null 2>&1; then
        print_info "runhaskell not found, using stack exec runhaskell"
        stack exec runhaskell config/dev-server.hs "$command"
    else
        print_error "Neither runhaskell nor stack found!"
        print_error "Please install Haskell Stack: https://docs.haskellstack.org/"
        exit 1
    fi
}

# Main script logic
main() {
    local command="${1:-help}"
    
    case "$command" in
        "dev"|"build"|"run"|"setup"|"rebuild"|"status")
            check_dev_server
            run_dev_server "$command"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run the main function with all arguments
main "$@"
